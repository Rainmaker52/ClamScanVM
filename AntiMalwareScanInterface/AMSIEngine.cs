using Windows.Win32;
using Windows.Win32.System.Antimalware;

namespace ClamScanVM;

public class AMSIEngine : IVirusEngine
{
    private readonly HAMSICONTEXT context;
    private HAMSISESSION session;

    public List<string> AcceptedOptions()
    {
        return new List<string>();
    }

    public AMSIEngine()
    {
        var initSuccess = PInvoke.AmsiInitialize("ClamVMScan", out var context);
        if (!initSuccess.Succeeded)
        {
            throw new Exception($"Failed to initialize AMSI backend. Result {initSuccess.Value.ToString()}");
        }
        this.context = context;
    }

    public async Task Initialize(List<KeyValuePair<string, string>> options)
    {

        var sessionSuccess = PInvoke.AmsiOpenSession(this.context, out var amsiSession);
        if (!sessionSuccess.Succeeded) 
        {
            throw new Exception($"Failed to open session on context. Result is {sessionSuccess.Value.ToString()}");
        }
        this.session = amsiSession;
    }

    public unsafe async Task<ScanResult> ScanBuffer(ReadOnlyMemory<byte> buffer)
    {
        using var pinnedBuffer = buffer.Pin();
        var scanSuccess = PInvoke.AmsiScanBuffer(this.context, pinnedBuffer.Pointer, (uint) buffer.Length, "buffer", this.session, out var scanResult);

        if (!scanSuccess.Succeeded)
        {
            return new ScanResult(ScanResultDescription.Error, scanSuccess.Value.ToString());
        }

        switch (scanResult)
        {
            case AMSI_RESULT.AMSI_RESULT_CLEAN:
                return new ScanResult(ScanResultDescription.Clean);
                break;
            case AMSI_RESULT.AMSI_RESULT_DETECTED:
                return new ScanResult(ScanResultDescription.ThreatFound);

            // Note; for C++, there's a Macro to detect whether something is malware or not.
            // But CSWin32 does not generate this macro. The "not detected" seems to be analogous to "clean".
            case AMSI_RESULT.AMSI_RESULT_NOT_DETECTED:
                return new ScanResult(ScanResultDescription.Clean);
            default:
                return new ScanResult(ScanResultDescription.Error, "Unknown return code");
        }
    }

    public async Task<bool> TestConnection()
    {
        return this.session != null && this.context != null;
    }

    public async Task UnInitialize()
    {
        PInvoke.AmsiUninitialize(this.context);
    }
}
